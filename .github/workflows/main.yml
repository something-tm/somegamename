name: Unity CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  pr-update-check:
    permissions:
      pull-requests: write
      contents: read
    runs-on: ubuntu-latest
    outputs:
      up_to_date: ${{ steps.checks.outputs.up_to_date }}
    steps:
      - name: Checkout with LFS
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          lfs: true
          fetch-depth: 0

      - name: Fetch main
        run: git fetch origin main

      - id: checks
        name: Check if branch is up-to-date
        if: github.event_name == 'pull_request'
        run: |
          if ! git merge-base --is-ancestor origin/main ${{ github.event.pull_request.head.sha }};
          then
            echo "This branch is not up-to-date with main";
            exit 1;
          fi

      - name: Comment PR if branch is behind
        if: failure()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          header: "PR Update Check"
          message: "⚠️ Your branch is not up-to-date with main. Please merge or rebase main."

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: pr-update-check
    permissions:
      contents: read
      actions: write
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        unityVersion:
          - 6000.2.2f1
    steps:
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo apt-get clean
          docker system prune --all --force
          df -h

      - name: Checkout with LFS
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Cache Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ runner.os }}-unity-${{ hashFiles('Packages/**','ProjectSettings/**') }}
          restore-keys: |
            Library-${{ runner.os }}-unity-
            Library-${{ runner.os }}-
            Library-

      - name: Run Tests
        uses: game-ci/unity-test-runner@v4
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          artifactsPath: test-artifacts
          githubToken: ${{ github.event_name == 'push' && secrets.GITHUB_TOKEN || '' }}
          unityVersion: ${{ matrix.unityVersion }}

      - name: Upload Test Results
        if: steps.tests.outputs.artifactsPath != ''
        uses: actions/upload-artifact@v4
        with:
          name: Test results
          path: ${{ steps.tests.outputs.artifactsPath }}

      - name: Comment if tests failed
        if: failure()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          header: "Unity Test Results"
          message: "⚠️ Unity tests failed. Check test-artifacts for details."

  build:
    name: Build ${{ matrix.targetPlatform }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: test
    permissions:
      pull-requests: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            targetPlatform: StandaloneLinux64
            unityVersion: 6000.2.2f1
          - os: windows-2022
            targetPlatform: StandaloneWindows64
            unityVersion: 6000.2.2f1
          - os: macos-latest
            targetPlatform: StandaloneOSX
            unityVersion: 6000.2.2f1

    steps:
      # --- OS-specific cleanup ---
      - name: Free up MacOS & Linux disk space
        if: runner.os != 'Windows'
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo rm -rf /usr/share/dotnet /usr/local/lib/android
            sudo apt-get clean
            docker system prune --all --force
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            sudo rm -rf /Applications/Xcode*.app /Library/Android
          fi
          df -h

      - name: Free up Windows disk space
        if: runner.os == 'Windows'
        run: |
          Remove-Item -Recurse -Force "C:\ProgramData\chocolatey" -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force "C:\Android" -ErrorAction SilentlyContinue

      # --- Checkout code ---
      - name: Checkout with LFS
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      # --- Cache ---
      - name: Cache Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ runner.os }}-unity-${{ hashFiles('Packages/**','ProjectSettings/**') }}
          restore-keys: |
            Library-${{ runner.os }}-unity-
            Library-${{ runner.os }}-
            Library-

      # --- Build step ---
      - name: Build Unity Project
        id: builds
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          unityVersion: ${{ matrix.unityVersion }}
          allowDirtyBuild: true

      # --- Upload artifact ---
      - name: Upload Build Results
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}-${{ matrix.os }}
          path: build

      - name: Comment if build failed
        if: failure()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          header: "Unity Build Results"
          message: "⚠️ Unity build failed on ${{ matrix.targetPlatform }} / ${{ matrix.os }}."

